from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from utils.keyboards import get_main_keyboard, get_zodiac_keyboard
from data.zodiac_compatibility import zodiac_compatibility, zodiac_signs

async def show_zodiac_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
    ‚ôåÔ∏è *–¢–µ—Å—Ç –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –ó–æ–¥–∏–∞–∫–∞*

    –£–∑–Ω–∞–π—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –≤–∞—à–∏ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞!

    *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
    ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

    *–ü—Ä–∏–º–µ—Ä:* `–û–≤–µ–Ω –í–µ—Å—ã` –∏–ª–∏ `–¢–µ–ª–µ—Ü –°–∫–æ—Ä–ø–∏–æ–Ω`

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    context.user_data['waiting_for_zodiac_input'] = True
    context.user_data['zodiac_step'] = 1 

    await update.message.reply_text(text, reply_markup=get_zodiac_keyboard(), parse_mode='Markdown')

async def process_zodiac_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    if context.user_data.get('zodiac_step') == 2:
        first_sign = context.user_data.get('first_sign')
        signs_found = []
        
        for sign in zodiac_signs:
            if sign.lower() in text.lower():
                signs_found.append(sign)
        
        if signs_found:
            second_sign = signs_found[0]
            await check_compatibility(update, first_sign, second_sign)
            context.user_data.pop('waiting_for_zodiac_input', None)
            context.user_data.pop('zodiac_step', None)
            context.user_data.pop('first_sign', None)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫:",
                parse_mode='Markdown'
            )
        return
    
    signs_found = []
    for sign in zodiac_signs:
        if sign.lower() in text.lower():
            signs_found.append(sign)
    
    if len(signs_found) >= 2:
        await check_compatibility(update, signs_found[0], signs_found[1])
        context.user_data.pop('waiting_for_zodiac_input', None)
        context.user_data.pop('zodiac_step', None)
        
    elif len(signs_found) == 1:
        context.user_data['first_sign'] = signs_found[0]
        context.user_data['zodiac_step'] = 2
        
        text = f"""
‚úÖ *–ü–µ—Ä–≤—ã–π –∑–Ω–∞–∫:* {signs_found[0]}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:
        """
        await update.message.reply_text(text, parse_mode='Markdown')
        
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n*–ü—Ä–∏–º–µ—Ä:* –û–≤–µ–Ω –¢–µ–ª–µ—Ü",
            parse_mode='Markdown'
        )

async def check_compatibility(update: Update, sign1: str, sign2: str):
    pair1 = f"{sign1} - {sign2}"
    pair2 = f"{sign2} - {sign1}"
    
    compatibility = None
    for comp in zodiac_compatibility:
        if comp["pair"] == pair1 or comp["pair"] == pair2:
            compatibility = comp
            break
    
    if compatibility:
        percentage = compatibility["percentage"]
        pair = compatibility["pair"]
        
        if percentage >= 90:
            emoji = "üíñ"
            rating = "–ò–î–ï–ê–õ–¨–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨"
        elif percentage >= 70:
            emoji = "üíï"
            rating = "–û–¢–õ–ò–ß–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨"
        elif percentage >= 50:
            emoji = "üíù"
            rating = "–•–û–†–û–®–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨"
        else:
            emoji = "üíî"
            rating = "–°–õ–û–ñ–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨"
        
        response = f"""
{emoji} *–°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: {percentage}%*
*–ü–∞—Ä–∞:* {pair}
*–†–µ–π—Ç–∏–Ω–≥:* {rating}

üåü *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*
{compatibility["strengths"]}

‚ö° *–°–ª–æ–∂–Ω–æ—Å—Ç–∏:*
{compatibility["challenges"]}

üíë *–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è:*
{compatibility["love"]}

üë´ *–î—Ä—É–∂–±–∞:*
{compatibility["friendship"]}

üíº *–ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å:*
{compatibility["career"]}

üí° *–°–æ–≤–µ—Ç –¥–ª—è –ø–∞—Ä—ã:*
{compatibility["advice"]}

*–ü–æ–º–Ω–∏—Ç–µ:* –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞ - —ç—Ç–æ –ª–∏—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä!
–ù–∞—Å—Ç–æ—è—â–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç—Ä–æ—è—Ç—Å—è –Ω–∞ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–µ–Ω–∏–∏ –∏ –ª—é–±–≤–∏. üí´
        """
    else:
        response = f"""
‚ùå *–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*

–î–ª—è –ø–∞—Ä—ã *{sign1} - {sign2}* –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–Ω–∞–∫–æ–≤.
        """
    
    await update.message.reply_text(response, parse_mode='Markdown', reply_markup=get_main_keyboard())

async def show_all_zodiac_signs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    
    text = f"""
*–î–∞—Ç—ã –∑–Ω–∞–∫–æ–≤:*
‚Ä¢ –û–≤–µ–Ω: 21 –º–∞—Ä—Ç–∞ - 19 –∞–ø—Ä–µ–ª—è
‚Ä¢ –¢–µ–ª–µ—Ü: 20 –∞–ø—Ä–µ–ª—è - 20 –º–∞—è  
‚Ä¢ –ë–ª–∏–∑–Ω–µ—Ü—ã: 21 –º–∞—è - 20 –∏—é–Ω—è
‚Ä¢ –†–∞–∫: 21 –∏—é–Ω—è - 22 –∏—é–ª—è
‚Ä¢ –õ–µ–≤: 23 –∏—é–ª—è - 22 –∞–≤–≥—É—Å—Ç–∞
‚Ä¢ –î–µ–≤–∞: 23 –∞–≤–≥—É—Å—Ç–∞ - 22 —Å–µ–Ω—Ç—è–±—Ä—è
‚Ä¢ –í–µ—Å—ã: 23 —Å–µ–Ω—Ç—è–±—Ä—è - 22 –æ–∫—Ç—è–±—Ä—è
‚Ä¢ –°–∫–æ—Ä–ø–∏–æ–Ω: 23 –æ–∫—Ç—è–±—Ä—è - 21 –Ω–æ—è–±—Ä—è
‚Ä¢ –°—Ç—Ä–µ–ª–µ—Ü: 22 –Ω–æ—è–±—Ä—è - 21 –¥–µ–∫–∞–±—Ä—è
‚Ä¢ –ö–æ–∑–µ—Ä–æ–≥: 22 –¥–µ–∫–∞–±—Ä—è - 19 —è–Ω–≤–∞—Ä—è
‚Ä¢ –í–æ–¥–æ–ª–µ–π: 20 —è–Ω–≤–∞—Ä—è - 18 —Ñ–µ–≤—Ä–∞–ª—è
‚Ä¢ –†—ã–±—ã: 19 —Ñ–µ–≤—Ä–∞–ª—è - 20 –º–∞—Ä—Ç–∞
    """
    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_keyboard())
