from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import get_main_keyboard, get_anxiety_keyboard, get_anxiety_techniques_keyboard
from data.anxiety_data import anxiety_techniques, anxiety_categories

async def handle_anxiety_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    anxiety_main_buttons = [
        'üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏', 
        'üåç 5-4-3-2-1', 
        'üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
        'üîô –ù–∞–∑–∞–¥'
    ]
    
    all_technique_names = []
    for category in anxiety_techniques.values():
        for technique in category['techniques']:
            all_technique_names.append(technique['name'])
    
    if text == 'üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å':
        await show_anxiety_main_menu(update, context)
        return True
    
    if text in anxiety_main_buttons:
        await handle_anxiety_selection(update, context, text)
        return True
    
    if text in all_technique_names:
        await show_technique_details(update, context)
        return True
    
    return False


async def show_anxiety_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ—â–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    text = """
üò∞ *–ü–æ–º–æ—â—å –ø—Ä–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏*

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º.

*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:*
    """
    
    await update.message.reply_text(text, reply_markup=get_anxiety_keyboard(), parse_mode='Markdown')

async def handle_anxiety_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, button_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–º–æ—â–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."""
    if button_text == 'üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏':
        await show_anxiety_techniques(update, context, 'breathing')
    elif button_text == 'üåç 5-4-3-2-1':
        await show_anxiety_techniques(update, context, 'grounding')
    elif button_text == 'üí™ –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏':
        await show_anxiety_techniques(update, context, 'physical')


async def show_anxiety_techniques(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    category_data = anxiety_techniques[category]
    
    text = f"""
{category_data['title']}

*{category_data['description']}*

*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É:*
    """
    
    context.user_data['current_anxiety_category'] = category
    
    await update.message.reply_text(
        text, 
        parse_mode='Markdown',
        reply_markup=get_anxiety_techniques_keyboard(category)
    )

async def show_technique_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    current_category = context.user_data.get('current_anxiety_category')
    if not current_category:
        await show_anxiety_main_menu(update, context)
        return
    
    category_data = anxiety_techniques[current_category]
    
    selected_technique = None
    for technique in category_data['techniques']:
        if technique['name'] == text:
            selected_technique = technique
            break
    
    if not selected_technique:
        await show_anxiety_techniques(update, context, current_category)
        return
    
    steps_text = ""
    for i, step in enumerate(selected_technique['steps'], 1):
        steps_text += f"{i}. {step}\n"
    
    technique_text = f"""
üßò *{selected_technique['name']}*

*–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*
{steps_text}

üí° *–°–æ–≤–µ—Ç:* {selected_technique['tip']}

*–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*
    """
    
    await update.message.reply_text(technique_text, reply_markup=get_main_keyboard(), parse_mode='Markdown')