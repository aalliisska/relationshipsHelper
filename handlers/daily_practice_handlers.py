from telegram.ext import ContextTypes
from telegram import Update
import random
from data.motivational_quotes import motivational_quotes
from data.affirmations import relationship_affirmations
from utils.keyboards import get_main_keyboard, get_settings_keyboard
import logging

logger = logging.getLogger(__name__)

subscribed_users = set()

async def send_daily_practice(context: ContextTypes.DEFAULT_TYPE):
    if not subscribed_users:
        logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π")
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è {len(subscribed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    for user_id in list(subscribed_users): 
        try:
            user = await context.bot.get_chat(user_id)
            first_name = user.first_name
            
            choice = random.choice(['motivation', 'affirmation'])
            
            if choice == 'motivation':
                quote = random.choice(motivational_quotes)
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}!\n\nüí´ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{quote}"
            else:
                affirmation = random.choice(relationship_affirmations)
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}!\n\nüíù *–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—Å:*\n\n{affirmation}"
            
            await context.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if "bot was blocked" in str(e).lower():
                subscribed_users.discard(user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")

async def daily_practice_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if user_id in subscribed_users else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    
    text = f"""
    ‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*
    
    –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}
    
    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await update.message.reply_text(text, reply_markup=get_settings_keyboard(), parse_mode='Markdown')

async def enable_daily_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed_users.add(user_id)
    
    await update.message.reply_text(
        "‚úÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown',
    )

async def disable_daily_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed_users.discard(user_id)
    
    await update.message.reply_text(
        "‚ùå *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!*\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )